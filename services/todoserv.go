package services

import (
	"database/sql"
	"fmt"
	//"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

//var schema= 'CREATE TABLE Todos(
//id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
//todo  text NOT NULL
//)'

type Todos struct {
	repo Repo
}
type TodoTmp struct {
	id   int
	todo string
}
type Repo interface {
	GetAll() []string
	Create(todo string)
}

//func NewTodo(repo Repo) *Todo{
//	return &Todo{repo: repo}
//}
func NewTodos(repo Repo) *Todos {
	return &Todos{repo: repo}
}
func (t *Todos) Create(todo string) {
	t.repo.Create(todo)
}
func (t *Todos) GetAll() []string {
	return t.repo.GetAll()
}

type ToBase struct {
	todo []string
}
type ToLocal struct {
	todo []string
}

func (todo *ToLocal) Create(s string) {
	todo.todo = append(todo.todo, s)
	return
}
func (todo *ToBase) Create(s string) {
	ifExist := true
	for _, t := range GetAll() {
		if s == t {
			ifExist = false
			fmt.Println("Such todo is already exist in todoList")
			break
		}
	}
	if ifExist {
		connStr := "user=postgres password=rose20 dbname=postgres sslmode=disable"
		db, err := sql.Open("postgres", connStr)
		if err != nil {
			panic(err)
		}
		defer db.Close()

		db.Exec("insert into todos (todo) values ($1)", s)
		if err != nil {
			panic(err)
		}
		fmt.Println("Created: ", s)
	}
}

func (todo *ToLocal) GetAll() []string {
	return todo.todo
}
func (todo *ToBase) GetAll() []string {
	connStr := "user=postgres password=rose20 dbname=postgres sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	rows, err := db.Query("select * from todos")
	if err != nil {
		panic(err)
	}
	for rows.Next() {
		t := TodoTmp{}
		err := rows.Scan(&t.id, &t.todo)
		if err != nil {
			fmt.Println(err)
			continue
		}
		todo.todo = append(todo.todo, t.todo)
	}
	return todo.todo
}

func (todo *Todos) ClearAllDb() {
	connStr := "user=postgres password=rose20 dbname=postgres sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()
	db.Exec("delete from todos")
}

func GetAll() []string {
	connStr := "user=postgres password=rose20 dbname=postgres sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	rows, err := db.Query("select * from todos")
	if err != nil {
		panic(err)
	}
	var tmp []string
	for rows.Next() {
		t := TodoTmp{}
		err := rows.Scan(&t.id, &t.todo)
		if err != nil {
			fmt.Println(err)
			continue
		}

		tmp = append(tmp, t.todo)
	}
	return tmp
}
